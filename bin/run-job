#!/usr/bin/python3

import argparse
import os
import signal
import yaml

from processcontrol import runner
from processcontrol import job_spec
from processcontrol import job_state


def sigterm_handler(signum, frame):
    runner.terminate()


def list_jobs(verbose=True, only_running=False):
    for job_slug in job_spec.list():
        try:
            # FIXME: Nicer if this inner loop moved to Job rather than having
            # status come from an ephemeral runner.
            job = job_spec.load(job_slug)
            status = runner.JobRunner(job).status()
            if status is None and only_running:
                continue
            if verbose:
                message = "{job} - {name}".format(job=job_slug, name=job.name)
                if status is not None:
                    message += "\t" + yaml.dump(status).strip()
                if job.description is not None:
                    message += "\n\t" + job.description

                if len(job.tags) > 0:
                    message += "\n\ttags: " + ", ".join(job.tags)

                stored_state = job_state.load_state(job_slug)
                message += "\n\tlast status: " + stored_state.last_completion_status
            else:
                message = job_slug

        except AssertionError:
            if only_running:
                continue
            if verbose:
                message = "{job} ***Invalid configuration***".format(job=job_slug)
            else:
                message = job_slug

        print(message)


if __name__ == "__main__":
    # TODO: Rename script and implement --disable-group, --enable-group
    parser = argparse.ArgumentParser(description="Run or query `process-control` jobs.")
    job_group = parser.add_mutually_exclusive_group()
    job_group.add_argument("-j", "--job", dest="start_job", help="Run a given job.", type=str, metavar="JOB_NAME")
    job_group.add_argument("-k", "--kill-job", help="Kill a given job.", metavar="JOB_NAME", type=str)
    job_group.add_argument("-l", "--list-jobs", help="Print a list of available jobs.", action='store_true')
    job_group.add_argument("-s", "--status", help="Print status of all jobs.", action='store_true')
    parser.add_argument("-r", "--only-running", help="Only list or print status of running jobs.", action='store_true')
    parser.add_argument(
        "-w",
        "--slow-start",
        dest="slow_start",
        help="Slow start a job, if a slow-start configuration has been supplied.",
        action="store_true"
    )
    args = parser.parse_args()

    if args.start_job is not None:

        # catch SIGTERM which we're using as a cheap interprocess signal
        signal.signal(signal.SIGTERM, sigterm_handler)

        job = job_spec.load(args.start_job)
        runner = runner.JobRunner(job)
        runner.run(**vars(args))

    elif args.kill_job is not None:

        job = job_spec.load(args.kill_job)
        status = runner.JobRunner(job).status()

        if status is None:
            print("No running process found for job %s." % args.kill_job)
        elif status["status"] != "running":
            print("Job %s (%s) is %s." % (args.kill_job, status["pid"], status["status"]))
        else:
            print("Killing process ID %s of job %s." % (status["pid"], args.kill_job))
            os.kill(status["pid"], signal.SIGTERM)

    elif args.list_jobs or args.status:

        list_jobs(verbose=args.status, only_running=args.only_running)

    else:

        parser.print_help()
